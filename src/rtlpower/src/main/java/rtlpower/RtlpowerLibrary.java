package rtlpower;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;

/**
 * Wrapper for library <b>rtlpower</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("rtlpower") 
@Runtime(CRuntime.class) 
public class RtlpowerLibrary {
	static {
		BridJ.register();
	}
	public static final int MAX_TUNES = (int)4000;
	public static final int DEFAULT_BUF_LENGTH = (int)(1 * 16384);
	public static final int MINIMUM_RATE = (int)1000000;
	public static final int MAXIMUM_FFT = (int)32;
	public static final int AUTO_GAIN = (int)-100;
	public static final int MAXIMUM_RATE = (int)3200000;
	public static final int DEFAULT_TARGET = (int)2400000;
	public static final int BUFFER_DUMP = (int)(1 << 12);
	/**
	 * Original signature : <code>int frequency_range(misc_settings*, tuning_state*, channel_solve*, int)</code><br>
	 * <i>native declaration : line 102</i>
	 */
	public static native int frequency_range(Pointer<misc_settings > ms, Pointer<tuning_state > tunes, Pointer<channel_solve > c, int tune_count);
	public static native void free_frequency_range(Pointer<tuning_state > tunes, int tune_count);
	/**
	 * Original signature : <code>void scan_tune(rtlsdr_dev*, tuning_state*)</code><br>
	 * <i>native declaration : line 103</i>
	 */
	public static native void scan_tune(Pointer dev, Pointer<tuning_state > ts);
	/**
	 * Original signature : <code>void generate_sine_tables(sine_table*, tuning_state*, int)</code><br>
	 * <i>native declaration : line 104</i>
	 */
	public static native void generate_sine_tables(Pointer<sine_table > s_tables, Pointer<tuning_state > tunes, int tune_count);
	/**
	 * Original signature : <code>double rectangle(int, int)</code><br>
	 * <i>native declaration : line 106</i>
	 */
	public static native double rectangle(int i, int length);
	/**
	 * Original signature : <code>double hamming(int, int)</code><br>
	 * <i>native declaration : line 107</i>
	 */
	public static native double hamming(int i, int length);
	/**
	 * Original signature : <code>double blackman(int, int)</code><br>
	 * <i>native declaration : line 108</i>
	 */
	public static native double blackman(int i, int length);
	/**
	 * Original signature : <code>double blackman_harris(int, int)</code><br>
	 * <i>native declaration : line 109</i>
	 */
	public static native double blackman_harris(int i, int length);
	/**
	 * Original signature : <code>double hann_poisson(int, int)</code><br>
	 * <i>native declaration : line 110</i>
	 */
	public static native double hann_poisson(int i, int length);
	/**
	 * Original signature : <code>double youssef(int, int)</code><br>
	 * <i>native declaration : line 111</i>
	 */
	public static native double youssef(int i, int length);
	/**
	 * Original signature : <code>double kaiser(int, int)</code><br>
	 * <i>native declaration : line 112</i>
	 */
	public static native double kaiser(int i, int length);
	/**
	 * Original signature : <code>double bartlett(int, int)</code><br>
	 * <i>native declaration : line 113</i>
	 */
	public static native double bartlett(int i, int length);
}
